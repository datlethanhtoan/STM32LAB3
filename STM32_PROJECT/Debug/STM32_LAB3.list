
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800296c  0800296c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800296c  0800296c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800296c  0800296c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000001c  08002990  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002990  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091e0  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aad  00000000  00000000  00029225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168cf  00000000  00000000  0002c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae60  00000000  00000000  000429bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824e0  00000000  00000000  0004d81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfcff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e0  00000000  00000000  000cfd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002930 	.word	0x08002930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002930 	.word	0x08002930

0800014c <display7SEG>:
#include "global.h"
#include "main.h"
#include "software_timer.h"

void display7SEG(int num)
 {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	d87f      	bhi.n	800025a <display7SEG+0x10e>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <display7SEG+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000189 	.word	0x08000189
 8000164:	0800019f 	.word	0x0800019f
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001cb 	.word	0x080001cb
 8000170:	080001e1 	.word	0x080001e1
 8000174:	080001f7 	.word	0x080001f7
 8000178:	0800020d 	.word	0x0800020d
 800017c:	08000223 	.word	0x08000223
 8000180:	08000239 	.word	0x08000239
 8000184:	08000245 	.word	0x08000245
	switch(num)
	{
		 case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5, 0);
 8000188:	2200      	movs	r2, #0
 800018a:	213f      	movs	r1, #63	; 0x3f
 800018c:	4835      	ldr	r0, [pc, #212]	; (8000264 <display7SEG+0x118>)
 800018e:	f001 fbad 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,1);
 8000192:	2201      	movs	r2, #1
 8000194:	2140      	movs	r1, #64	; 0x40
 8000196:	4833      	ldr	r0, [pc, #204]	; (8000264 <display7SEG+0x118>)
 8000198:	f001 fba8 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 800019c:	e05e      	b.n	800025c <display7SEG+0x110>
		 case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0  |GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6, 1);
 800019e:	2201      	movs	r2, #1
 80001a0:	2179      	movs	r1, #121	; 0x79
 80001a2:	4830      	ldr	r0, [pc, #192]	; (8000264 <display7SEG+0x118>)
 80001a4:	f001 fba2 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_2,0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2106      	movs	r1, #6
 80001ac:	482d      	ldr	r0, [pc, #180]	; (8000264 <display7SEG+0x118>)
 80001ae:	f001 fb9d 	bl	80018ec <HAL_GPIO_WritePin>
			 break;
 80001b2:	e053      	b.n	800025c <display7SEG+0x110>
		 case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_6 |GPIO_PIN_3 |GPIO_PIN_4 , 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	215b      	movs	r1, #91	; 0x5b
 80001b8:	482a      	ldr	r0, [pc, #168]	; (8000264 <display7SEG+0x118>)
 80001ba:	f001 fb97 	bl	80018ec <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 |GPIO_PIN_5,1);
 80001be:	2201      	movs	r2, #1
 80001c0:	2124      	movs	r1, #36	; 0x24
 80001c2:	4828      	ldr	r0, [pc, #160]	; (8000264 <display7SEG+0x118>)
 80001c4:	f001 fb92 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 80001c8:	e048      	b.n	800025c <display7SEG+0x110>
		 case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_6 |GPIO_PIN_3 |GPIO_PIN_2 , 0);
 80001ca:	2200      	movs	r2, #0
 80001cc:	214f      	movs	r1, #79	; 0x4f
 80001ce:	4825      	ldr	r0, [pc, #148]	; (8000264 <display7SEG+0x118>)
 80001d0:	f001 fb8c 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 |GPIO_PIN_5,1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2130      	movs	r1, #48	; 0x30
 80001d8:	4822      	ldr	r0, [pc, #136]	; (8000264 <display7SEG+0x118>)
 80001da:	f001 fb87 	bl	80018ec <HAL_GPIO_WritePin>
			  break;
 80001de:	e03d      	b.n	800025c <display7SEG+0x110>
		 case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 |GPIO_PIN_1 |GPIO_PIN_6 |GPIO_PIN_2 , 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2166      	movs	r1, #102	; 0x66
 80001e4:	481f      	ldr	r0, [pc, #124]	; (8000264 <display7SEG+0x118>)
 80001e6:	f001 fb81 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_3 |GPIO_PIN_4,1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2119      	movs	r1, #25
 80001ee:	481d      	ldr	r0, [pc, #116]	; (8000264 <display7SEG+0x118>)
 80001f0:	f001 fb7c 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 80001f4:	e032      	b.n	800025c <display7SEG+0x110>
		 case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_2 |GPIO_PIN_3 |GPIO_PIN_5| GPIO_PIN_6, 0);
 80001f6:	2200      	movs	r2, #0
 80001f8:	216d      	movs	r1, #109	; 0x6d
 80001fa:	481a      	ldr	r0, [pc, #104]	; (8000264 <display7SEG+0x118>)
 80001fc:	f001 fb76 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 |GPIO_PIN_4 ,1);
 8000200:	2201      	movs	r2, #1
 8000202:	2112      	movs	r1, #18
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <display7SEG+0x118>)
 8000206:	f001 fb71 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 800020a:	e027      	b.n	800025c <display7SEG+0x110>
		 case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_6 |GPIO_PIN_2 |GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5, 0);
 800020c:	2200      	movs	r2, #0
 800020e:	217d      	movs	r1, #125	; 0x7d
 8000210:	4814      	ldr	r0, [pc, #80]	; (8000264 <display7SEG+0x118>)
 8000212:	f001 fb6b 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1);
 8000216:	2201      	movs	r2, #1
 8000218:	2102      	movs	r1, #2
 800021a:	4812      	ldr	r0, [pc, #72]	; (8000264 <display7SEG+0x118>)
 800021c:	f001 fb66 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 8000220:	e01c      	b.n	800025c <display7SEG+0x110>
		 case 7:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	2178      	movs	r1, #120	; 0x78
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <display7SEG+0x118>)
 8000228:	f001 fb60 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2,0);
 800022c:	2200      	movs	r2, #0
 800022e:	2107      	movs	r1, #7
 8000230:	480c      	ldr	r0, [pc, #48]	; (8000264 <display7SEG+0x118>)
 8000232:	f001 fb5b 	bl	80018ec <HAL_GPIO_WritePin>
				break;
 8000236:	e011      	b.n	800025c <display7SEG+0x110>
		 case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5|GPIO_PIN_6, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	217f      	movs	r1, #127	; 0x7f
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <display7SEG+0x118>)
 800023e:	f001 fb55 	bl	80018ec <HAL_GPIO_WritePin>
				break;
 8000242:	e00b      	b.n	800025c <display7SEG+0x110>
		 case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3 |GPIO_PIN_6 |GPIO_PIN_5, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	216f      	movs	r1, #111	; 0x6f
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <display7SEG+0x118>)
 800024a:	f001 fb4f 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,1);
 800024e:	2201      	movs	r2, #1
 8000250:	2110      	movs	r1, #16
 8000252:	4804      	ldr	r0, [pc, #16]	; (8000264 <display7SEG+0x118>)
 8000254:	f001 fb4a 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 8000258:	e000      	b.n	800025c <display7SEG+0x110>
		 default:
			break;
 800025a:	bf00      	nop
	 }
 }
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010c00 	.word	0x40010c00

08000268 <resetCountValue>:


enum LEDState state1 = RED;
enum LEDState state2 = GREEN;

void resetCountValue() {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	count1 = red_val;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <resetCountValue+0x28>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a08      	ldr	r2, [pc, #32]	; (8000294 <resetCountValue+0x2c>)
 8000272:	6013      	str	r3, [r2, #0]
	count2 = green_val;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <resetCountValue+0x30>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <resetCountValue+0x34>)
 800027a:	6013      	str	r3, [r2, #0]
	state1 = RED;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <resetCountValue+0x38>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <resetCountValue+0x3c>)
 8000284:	2202      	movs	r2, #2
 8000286:	701a      	strb	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	2000008c 	.word	0x2000008c
 8000294:	20000000 	.word	0x20000000
 8000298:	20000090 	.word	0x20000090
 800029c:	20000004 	.word	0x20000004
 80002a0:	20000038 	.word	0x20000038
 80002a4:	20000008 	.word	0x20000008

080002a8 <Mode_1>:

void Mode_1(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	count1--;
 80002ac:	4b9f      	ldr	r3, [pc, #636]	; (800052c <Mode_1+0x284>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	4a9e      	ldr	r2, [pc, #632]	; (800052c <Mode_1+0x284>)
 80002b4:	6013      	str	r3, [r2, #0]
	count2--;
 80002b6:	4b9e      	ldr	r3, [pc, #632]	; (8000530 <Mode_1+0x288>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	4a9c      	ldr	r2, [pc, #624]	; (8000530 <Mode_1+0x288>)
 80002be:	6013      	str	r3, [r2, #0]
	switch(state1){
 80002c0:	4b9c      	ldr	r3, [pc, #624]	; (8000534 <Mode_1+0x28c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d05d      	beq.n	8000384 <Mode_1+0xdc>
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	f300 8086 	bgt.w	80003da <Mode_1+0x132>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <Mode_1+0x30>
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d02b      	beq.n	800032e <Mode_1+0x86>
				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 0);
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
			}
			break;
		default:
			break;
 80002d6:	e080      	b.n	80003da <Mode_1+0x132>
			HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 0);
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	4896      	ldr	r0, [pc, #600]	; (8000538 <Mode_1+0x290>)
 80002de:	f001 fb05 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2120      	movs	r1, #32
 80002e6:	4894      	ldr	r0, [pc, #592]	; (8000538 <Mode_1+0x290>)
 80002e8:	f001 fb00 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2140      	movs	r1, #64	; 0x40
 80002f0:	4891      	ldr	r0, [pc, #580]	; (8000538 <Mode_1+0x290>)
 80002f2:	f001 fafb 	bl	80018ec <HAL_GPIO_WritePin>
			if(count1 <= 0)
 80002f6:	4b8d      	ldr	r3, [pc, #564]	; (800052c <Mode_1+0x284>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	dc6f      	bgt.n	80003de <Mode_1+0x136>
				count1 = green_val - 1;
 80002fe:	4b8f      	ldr	r3, [pc, #572]	; (800053c <Mode_1+0x294>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a89      	ldr	r2, [pc, #548]	; (800052c <Mode_1+0x284>)
 8000306:	6013      	str	r3, [r2, #0]
				state1 = GREEN;
 8000308:	4b8a      	ldr	r3, [pc, #552]	; (8000534 <Mode_1+0x28c>)
 800030a:	2202      	movs	r2, #2
 800030c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2110      	movs	r1, #16
 8000312:	4889      	ldr	r0, [pc, #548]	; (8000538 <Mode_1+0x290>)
 8000314:	f001 faea 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	2120      	movs	r1, #32
 800031c:	4886      	ldr	r0, [pc, #536]	; (8000538 <Mode_1+0x290>)
 800031e:	f001 fae5 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	4884      	ldr	r0, [pc, #528]	; (8000538 <Mode_1+0x290>)
 8000328:	f001 fae0 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 800032c:	e057      	b.n	80003de <Mode_1+0x136>
			HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	4881      	ldr	r0, [pc, #516]	; (8000538 <Mode_1+0x290>)
 8000334:	f001 fada 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2120      	movs	r1, #32
 800033c:	487e      	ldr	r0, [pc, #504]	; (8000538 <Mode_1+0x290>)
 800033e:	f001 fad5 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	487c      	ldr	r0, [pc, #496]	; (8000538 <Mode_1+0x290>)
 8000348:	f001 fad0 	bl	80018ec <HAL_GPIO_WritePin>
			if(count1 <= 0)
 800034c:	4b77      	ldr	r3, [pc, #476]	; (800052c <Mode_1+0x284>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dc46      	bgt.n	80003e2 <Mode_1+0x13a>
				count1 = red_val - 1;
 8000354:	4b7a      	ldr	r3, [pc, #488]	; (8000540 <Mode_1+0x298>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a74      	ldr	r2, [pc, #464]	; (800052c <Mode_1+0x284>)
 800035c:	6013      	str	r3, [r2, #0]
				state1 = RED;
 800035e:	4b75      	ldr	r3, [pc, #468]	; (8000534 <Mode_1+0x28c>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4873      	ldr	r0, [pc, #460]	; (8000538 <Mode_1+0x290>)
 800036a:	f001 fabf 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	2120      	movs	r1, #32
 8000372:	4871      	ldr	r0, [pc, #452]	; (8000538 <Mode_1+0x290>)
 8000374:	f001 faba 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	486e      	ldr	r0, [pc, #440]	; (8000538 <Mode_1+0x290>)
 800037e:	f001 fab5 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 8000382:	e02e      	b.n	80003e2 <Mode_1+0x13a>
			HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	486b      	ldr	r0, [pc, #428]	; (8000538 <Mode_1+0x290>)
 800038a:	f001 faaf 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	2120      	movs	r1, #32
 8000392:	4869      	ldr	r0, [pc, #420]	; (8000538 <Mode_1+0x290>)
 8000394:	f001 faaa 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2140      	movs	r1, #64	; 0x40
 800039c:	4866      	ldr	r0, [pc, #408]	; (8000538 <Mode_1+0x290>)
 800039e:	f001 faa5 	bl	80018ec <HAL_GPIO_WritePin>
			if(count1 <= 0)
 80003a2:	4b62      	ldr	r3, [pc, #392]	; (800052c <Mode_1+0x284>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	dc1d      	bgt.n	80003e6 <Mode_1+0x13e>
				count1 = yellow_val - 1;
 80003aa:	4b66      	ldr	r3, [pc, #408]	; (8000544 <Mode_1+0x29c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	4a5e      	ldr	r2, [pc, #376]	; (800052c <Mode_1+0x284>)
 80003b2:	6013      	str	r3, [r2, #0]
				state1 = RED;
 80003b4:	4b5f      	ldr	r3, [pc, #380]	; (8000534 <Mode_1+0x28c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	485e      	ldr	r0, [pc, #376]	; (8000538 <Mode_1+0x290>)
 80003c0:	f001 fa94 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2120      	movs	r1, #32
 80003c8:	485b      	ldr	r0, [pc, #364]	; (8000538 <Mode_1+0x290>)
 80003ca:	f001 fa8f 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	4859      	ldr	r0, [pc, #356]	; (8000538 <Mode_1+0x290>)
 80003d4:	f001 fa8a 	bl	80018ec <HAL_GPIO_WritePin>
			break;
 80003d8:	e005      	b.n	80003e6 <Mode_1+0x13e>
			break;
 80003da:	bf00      	nop
 80003dc:	e004      	b.n	80003e8 <Mode_1+0x140>
			break;
 80003de:	bf00      	nop
 80003e0:	e002      	b.n	80003e8 <Mode_1+0x140>
			break;
 80003e2:	bf00      	nop
 80003e4:	e000      	b.n	80003e8 <Mode_1+0x140>
			break;
 80003e6:	bf00      	nop


	}

	switch(state2){
 80003e8:	4b57      	ldr	r3, [pc, #348]	; (8000548 <Mode_1+0x2a0>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d065      	beq.n	80004bc <Mode_1+0x214>
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	f300 8092 	bgt.w	800051a <Mode_1+0x272>
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <Mode_1+0x158>
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d02f      	beq.n	800045e <Mode_1+0x1b6>
					HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 0);
					HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
				}
				break;
			default:
				break;
 80003fe:	e08c      	b.n	800051a <Mode_1+0x272>
				HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	484c      	ldr	r0, [pc, #304]	; (8000538 <Mode_1+0x290>)
 8000406:	f001 fa71 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000410:	4849      	ldr	r0, [pc, #292]	; (8000538 <Mode_1+0x290>)
 8000412:	f001 fa6b 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041c:	4846      	ldr	r0, [pc, #280]	; (8000538 <Mode_1+0x290>)
 800041e:	f001 fa65 	bl	80018ec <HAL_GPIO_WritePin>
				if(count2 <= 0)
 8000422:	4b43      	ldr	r3, [pc, #268]	; (8000530 <Mode_1+0x288>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	dc79      	bgt.n	800051e <Mode_1+0x276>
					count2 = green_val - 1;
 800042a:	4b44      	ldr	r3, [pc, #272]	; (800053c <Mode_1+0x294>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3b01      	subs	r3, #1
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <Mode_1+0x288>)
 8000432:	6013      	str	r3, [r2, #0]
					state2 = GREEN;
 8000434:	4b44      	ldr	r3, [pc, #272]	; (8000548 <Mode_1+0x2a0>)
 8000436:	2202      	movs	r2, #2
 8000438:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 1);
 800043a:	2201      	movs	r2, #1
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	483e      	ldr	r0, [pc, #248]	; (8000538 <Mode_1+0x290>)
 8000440:	f001 fa54 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044a:	483b      	ldr	r0, [pc, #236]	; (8000538 <Mode_1+0x290>)
 800044c:	f001 fa4e 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000456:	4838      	ldr	r0, [pc, #224]	; (8000538 <Mode_1+0x290>)
 8000458:	f001 fa48 	bl	80018ec <HAL_GPIO_WritePin>
				break;
 800045c:	e05f      	b.n	800051e <Mode_1+0x276>
				HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 1);
 800045e:	2201      	movs	r2, #1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	4835      	ldr	r0, [pc, #212]	; (8000538 <Mode_1+0x290>)
 8000464:	f001 fa42 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046e:	4832      	ldr	r0, [pc, #200]	; (8000538 <Mode_1+0x290>)
 8000470:	f001 fa3c 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	482f      	ldr	r0, [pc, #188]	; (8000538 <Mode_1+0x290>)
 800047c:	f001 fa36 	bl	80018ec <HAL_GPIO_WritePin>
				if(count2 <= 0)
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <Mode_1+0x288>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dc4c      	bgt.n	8000522 <Mode_1+0x27a>
					count2 = red_val - 1;
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <Mode_1+0x298>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a28      	ldr	r2, [pc, #160]	; (8000530 <Mode_1+0x288>)
 8000490:	6013      	str	r3, [r2, #0]
					state2 = RED;
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <Mode_1+0x2a0>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4826      	ldr	r0, [pc, #152]	; (8000538 <Mode_1+0x290>)
 800049e:	f001 fa25 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	4823      	ldr	r0, [pc, #140]	; (8000538 <Mode_1+0x290>)
 80004aa:	f001 fa1f 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b4:	4820      	ldr	r0, [pc, #128]	; (8000538 <Mode_1+0x290>)
 80004b6:	f001 fa19 	bl	80018ec <HAL_GPIO_WritePin>
				break;
 80004ba:	e032      	b.n	8000522 <Mode_1+0x27a>
				HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	481d      	ldr	r0, [pc, #116]	; (8000538 <Mode_1+0x290>)
 80004c2:	f001 fa13 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	481a      	ldr	r0, [pc, #104]	; (8000538 <Mode_1+0x290>)
 80004ce:	f001 fa0d 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	4817      	ldr	r0, [pc, #92]	; (8000538 <Mode_1+0x290>)
 80004da:	f001 fa07 	bl	80018ec <HAL_GPIO_WritePin>
				if(count2 <=  0)
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <Mode_1+0x288>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dc1f      	bgt.n	8000526 <Mode_1+0x27e>
					count2 = yellow_val - 1;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <Mode_1+0x29c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <Mode_1+0x288>)
 80004ee:	6013      	str	r3, [r2, #0]
					state2 = RED;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <Mode_1+0x2a0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <Mode_1+0x290>)
 80004fc:	f001 f9f6 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000506:	480c      	ldr	r0, [pc, #48]	; (8000538 <Mode_1+0x290>)
 8000508:	f001 f9f0 	bl	80018ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <Mode_1+0x290>)
 8000514:	f001 f9ea 	bl	80018ec <HAL_GPIO_WritePin>
				break;
 8000518:	e005      	b.n	8000526 <Mode_1+0x27e>
				break;
 800051a:	bf00      	nop
 800051c:	e004      	b.n	8000528 <Mode_1+0x280>
				break;
 800051e:	bf00      	nop
 8000520:	e002      	b.n	8000528 <Mode_1+0x280>
				break;
 8000522:	bf00      	nop
 8000524:	e000      	b.n	8000528 <Mode_1+0x280>
				break;
 8000526:	bf00      	nop


		}
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000
 8000530:	20000004 	.word	0x20000004
 8000534:	20000038 	.word	0x20000038
 8000538:	40010800 	.word	0x40010800
 800053c:	20000090 	.word	0x20000090
 8000540:	2000008c 	.word	0x2000008c
 8000544:	20000088 	.word	0x20000088
 8000548:	20000008 	.word	0x20000008

0800054c <get7SEGval_1>:

static int get7SEGval_1(){
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	switch (mode){
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <get7SEGval_1+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3b01      	subs	r3, #1
 8000556:	2b03      	cmp	r3, #3
 8000558:	d816      	bhi.n	8000588 <get7SEGval_1+0x3c>
 800055a:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <get7SEGval_1+0x14>)
 800055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000560:	08000571 	.word	0x08000571
 8000564:	08000577 	.word	0x08000577
 8000568:	0800057d 	.word	0x0800057d
 800056c:	08000583 	.word	0x08000583
		case 1:
			return count1;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <get7SEGval_1+0x4c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	e00a      	b.n	800058c <get7SEGval_1+0x40>
		case 2:
			return red_temp;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <get7SEGval_1+0x50>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	e007      	b.n	800058c <get7SEGval_1+0x40>
		case 3:
			return yellow_temp;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <get7SEGval_1+0x54>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	e004      	b.n	800058c <get7SEGval_1+0x40>
		case 4:
			return green_temp;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <get7SEGval_1+0x58>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	e001      	b.n	800058c <get7SEGval_1+0x40>
		default:
			break;
 8000588:	bf00      	nop
	}
	return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000000 	.word	0x20000000
 800059c:	20000094 	.word	0x20000094
 80005a0:	20000098 	.word	0x20000098
 80005a4:	2000009c 	.word	0x2000009c

080005a8 <get7SEGval_2>:


static int get7SEGval_2(){
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	switch (mode){
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <get7SEGval_2+0x48>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d816      	bhi.n	80005e4 <get7SEGval_2+0x3c>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <get7SEGval_2+0x14>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005cd 	.word	0x080005cd
 80005c0:	080005d3 	.word	0x080005d3
 80005c4:	080005d9 	.word	0x080005d9
 80005c8:	080005df 	.word	0x080005df
		case 1:
			return count2;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <get7SEGval_2+0x4c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	e00a      	b.n	80005e8 <get7SEGval_2+0x40>
		case 2:
			return red_temp;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <get7SEGval_2+0x50>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	e007      	b.n	80005e8 <get7SEGval_2+0x40>
		case 3:
			return yellow_temp;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <get7SEGval_2+0x54>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	e004      	b.n	80005e8 <get7SEGval_2+0x40>
		case 4:
			return green_temp;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <get7SEGval_2+0x58>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	e001      	b.n	80005e8 <get7SEGval_2+0x40>
		default:
			break;
 80005e4:	bf00      	nop
	}
	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000094 	.word	0x20000094
 80005fc:	20000098 	.word	0x20000098
 8000600:	2000009c 	.word	0x2000009c

08000604 <LedDisplayMode>:


void LedDisplayMode(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	switch(mode)
 8000608:	4b4e      	ldr	r3, [pc, #312]	; (8000744 <LedDisplayMode+0x140>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	2b03      	cmp	r3, #3
 8000610:	f200 808c 	bhi.w	800072c <LedDisplayMode+0x128>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <LedDisplayMode+0x18>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000643 	.word	0x08000643
 8000624:	08000691 	.word	0x08000691
 8000628:	080006df 	.word	0x080006df
	{
		case 1:
			if(get_timer0_flag())
 800062c:	f000 fdac 	bl	8001188 <get_timer0_flag>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d07c      	beq.n	8000730 <LedDisplayMode+0x12c>
			{
				setTimer0(100); ///
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f000 fd28 	bl	800108c <setTimer0>
				Mode_1();
 800063c:	f7ff fe34 	bl	80002a8 <Mode_1>

			}
			break;
 8000640:	e076      	b.n	8000730 <LedDisplayMode+0x12c>
		case 2:
			if(get_timer0_flag())
 8000642:	f000 fda1 	bl	8001188 <get_timer0_flag>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d073      	beq.n	8000734 <LedDisplayMode+0x130>
			{
				setTimer0(200); /// den do nhap nhay 2 hz
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 fd1d 	bl	800108c <setTimer0>
				HAL_GPIO_TogglePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin);
 8000652:	2110      	movs	r1, #16
 8000654:	483c      	ldr	r0, [pc, #240]	; (8000748 <LedDisplayMode+0x144>)
 8000656:	f001 f961 	bl	800191c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin);
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	483a      	ldr	r0, [pc, #232]	; (8000748 <LedDisplayMode+0x144>)
 800065e:	f001 f95d 	bl	800191c <HAL_GPIO_TogglePin>


				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2120      	movs	r1, #32
 8000666:	4838      	ldr	r0, [pc, #224]	; (8000748 <LedDisplayMode+0x144>)
 8000668:	f001 f940 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin,1);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	4835      	ldr	r0, [pc, #212]	; (8000748 <LedDisplayMode+0x144>)
 8000674:	f001 f93a 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4832      	ldr	r0, [pc, #200]	; (8000748 <LedDisplayMode+0x144>)
 800067e:	f001 f935 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000688:	482f      	ldr	r0, [pc, #188]	; (8000748 <LedDisplayMode+0x144>)
 800068a:	f001 f92f 	bl	80018ec <HAL_GPIO_WritePin>
			}
			break;
 800068e:	e051      	b.n	8000734 <LedDisplayMode+0x130>
		case 3:
			if(get_timer0_flag())
 8000690:	f000 fd7a 	bl	8001188 <get_timer0_flag>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d04e      	beq.n	8000738 <LedDisplayMode+0x134>
			{
				setTimer0(200); /// den vang nhap nhay 2 hz
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f000 fcf6 	bl	800108c <setTimer0>
				HAL_GPIO_TogglePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin);
 80006a0:	2120      	movs	r1, #32
 80006a2:	4829      	ldr	r0, [pc, #164]	; (8000748 <LedDisplayMode+0x144>)
 80006a4:	f001 f93a 	bl	800191c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin);
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	4826      	ldr	r0, [pc, #152]	; (8000748 <LedDisplayMode+0x144>)
 80006ae:	f001 f935 	bl	800191c <HAL_GPIO_TogglePin>


				HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	4824      	ldr	r0, [pc, #144]	; (8000748 <LedDisplayMode+0x144>)
 80006b8:	f001 f918 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <LedDisplayMode+0x144>)
 80006c2:	f001 f913 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <LedDisplayMode+0x144>)
 80006cc:	f001 f90e 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	481c      	ldr	r0, [pc, #112]	; (8000748 <LedDisplayMode+0x144>)
 80006d8:	f001 f908 	bl	80018ec <HAL_GPIO_WritePin>
			}
			break;
 80006dc:	e02c      	b.n	8000738 <LedDisplayMode+0x134>
		case 4:
			if(get_timer0_flag())
 80006de:	f000 fd53 	bl	8001188 <get_timer0_flag>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d029      	beq.n	800073c <LedDisplayMode+0x138>
			{
				setTimer0(200); /// den vang nhap nhay 2 hz
 80006e8:	20c8      	movs	r0, #200	; 0xc8
 80006ea:	f000 fccf 	bl	800108c <setTimer0>
				HAL_GPIO_TogglePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin);
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <LedDisplayMode+0x144>)
 80006f2:	f001 f913 	bl	800191c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin);
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <LedDisplayMode+0x144>)
 80006fc:	f001 f90e 	bl	800191c <HAL_GPIO_TogglePin>


				HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <LedDisplayMode+0x144>)
 8000706:	f001 f8f1 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin,1);
 800070a:	2201      	movs	r2, #1
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <LedDisplayMode+0x144>)
 8000710:	f001 f8ec 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LedDisplayMode+0x144>)
 800071a:	f001 f8e7 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <LedDisplayMode+0x144>)
 8000726:	f001 f8e1 	bl	80018ec <HAL_GPIO_WritePin>
			}
			break;
 800072a:	e007      	b.n	800073c <LedDisplayMode+0x138>
		default:
			break;
 800072c:	bf00      	nop
 800072e:	e006      	b.n	800073e <LedDisplayMode+0x13a>
			break;
 8000730:	bf00      	nop
 8000732:	e004      	b.n	800073e <LedDisplayMode+0x13a>
			break;
 8000734:	bf00      	nop
 8000736:	e002      	b.n	800073e <LedDisplayMode+0x13a>
			break;
 8000738:	bf00      	nop
 800073a:	e000      	b.n	800073e <LedDisplayMode+0x13a>
			break;
 800073c:	bf00      	nop
	}
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000000c 	.word	0x2000000c
 8000748:	40010800 	.word	0x40010800

0800074c <LedScanning>:

void LedScanning(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	static int index = 0;
	if(mode == 1)
 8000750:	4bb4      	ldr	r3, [pc, #720]	; (8000a24 <LedScanning+0x2d8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	f040 80bb 	bne.w	80008d0 <LedScanning+0x184>
	{
		switch (index) {
 800075a:	4bb3      	ldr	r3, [pc, #716]	; (8000a28 <LedScanning+0x2dc>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b03      	cmp	r3, #3
 8000760:	f200 815b 	bhi.w	8000a1a <LedScanning+0x2ce>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <LedScanning+0x20>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	0800077d 	.word	0x0800077d
 8000770:	080007cd 	.word	0x080007cd
 8000774:	08000827 	.word	0x08000827
 8000778:	08000877 	.word	0x08000877
			case 0:
				// value
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	48aa      	ldr	r0, [pc, #680]	; (8000a2c <LedScanning+0x2e0>)
 8000784:	f001 f8b2 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	48a7      	ldr	r0, [pc, #668]	; (8000a2c <LedScanning+0x2e0>)
 8000790:	f001 f8ac 	bl	80018ec <HAL_GPIO_WritePin>

				//mode
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079a:	48a4      	ldr	r0, [pc, #656]	; (8000a2c <LedScanning+0x2e0>)
 800079c:	f001 f8a6 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	48a1      	ldr	r0, [pc, #644]	; (8000a2c <LedScanning+0x2e0>)
 80007a8:	f001 f8a0 	bl	80018ec <HAL_GPIO_WritePin>

				display7SEG( get7SEGval_1()/10);
 80007ac:	f7ff fece 	bl	800054c <get7SEGval_1>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a9f      	ldr	r2, [pc, #636]	; (8000a30 <LedScanning+0x2e4>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1092      	asrs	r2, r2, #2
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fcc4 	bl	800014c <display7SEG>
				index = 1;
 80007c4:	4b98      	ldr	r3, [pc, #608]	; (8000a28 <LedScanning+0x2dc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
				break;
 80007ca:	e129      	b.n	8000a20 <LedScanning+0x2d4>
			case 1:
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4896      	ldr	r0, [pc, #600]	; (8000a2c <LedScanning+0x2e0>)
 80007d4:	f001 f88a 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	4893      	ldr	r0, [pc, #588]	; (8000a2c <LedScanning+0x2e0>)
 80007e0:	f001 f884 	bl	80018ec <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	4890      	ldr	r0, [pc, #576]	; (8000a2c <LedScanning+0x2e0>)
 80007ec:	f001 f87e 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	488d      	ldr	r0, [pc, #564]	; (8000a2c <LedScanning+0x2e0>)
 80007f8:	f001 f878 	bl	80018ec <HAL_GPIO_WritePin>
				display7SEG( get7SEGval_1()%10);
 80007fc:	f7ff fea6 	bl	800054c <get7SEGval_1>
 8000800:	4601      	mov	r1, r0
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <LedScanning+0x2e4>)
 8000804:	fb83 2301 	smull	r2, r3, r3, r1
 8000808:	109a      	asrs	r2, r3, #2
 800080a:	17cb      	asrs	r3, r1, #31
 800080c:	1ad2      	subs	r2, r2, r3
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	1aca      	subs	r2, r1, r3
 8000818:	4610      	mov	r0, r2
 800081a:	f7ff fc97 	bl	800014c <display7SEG>
				index = 2;
 800081e:	4b82      	ldr	r3, [pc, #520]	; (8000a28 <LedScanning+0x2dc>)
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
				break;
 8000824:	e0fc      	b.n	8000a20 <LedScanning+0x2d4>
			case 2:
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082c:	487f      	ldr	r0, [pc, #508]	; (8000a2c <LedScanning+0x2e0>)
 800082e:	f001 f85d 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	487c      	ldr	r0, [pc, #496]	; (8000a2c <LedScanning+0x2e0>)
 800083a:	f001 f857 	bl	80018ec <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4879      	ldr	r0, [pc, #484]	; (8000a2c <LedScanning+0x2e0>)
 8000846:	f001 f851 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	4876      	ldr	r0, [pc, #472]	; (8000a2c <LedScanning+0x2e0>)
 8000852:	f001 f84b 	bl	80018ec <HAL_GPIO_WritePin>
				display7SEG(get7SEGval_2() / 10);
 8000856:	f7ff fea7 	bl	80005a8 <get7SEGval_2>
 800085a:	4603      	mov	r3, r0
 800085c:	4a74      	ldr	r2, [pc, #464]	; (8000a30 <LedScanning+0x2e4>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	1092      	asrs	r2, r2, #2
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fc6f 	bl	800014c <display7SEG>
				index = 3;
 800086e:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <LedScanning+0x2dc>)
 8000870:	2203      	movs	r2, #3
 8000872:	601a      	str	r2, [r3, #0]
				break;
 8000874:	e0d4      	b.n	8000a20 <LedScanning+0x2d4>
			case 3:
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	486b      	ldr	r0, [pc, #428]	; (8000a2c <LedScanning+0x2e0>)
 800087e:	f001 f835 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000888:	4868      	ldr	r0, [pc, #416]	; (8000a2c <LedScanning+0x2e0>)
 800088a:	f001 f82f 	bl	80018ec <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4865      	ldr	r0, [pc, #404]	; (8000a2c <LedScanning+0x2e0>)
 8000896:	f001 f829 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4862      	ldr	r0, [pc, #392]	; (8000a2c <LedScanning+0x2e0>)
 80008a2:	f001 f823 	bl	80018ec <HAL_GPIO_WritePin>
				display7SEG(get7SEGval_2() % 10);
 80008a6:	f7ff fe7f 	bl	80005a8 <get7SEGval_2>
 80008aa:	4601      	mov	r1, r0
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <LedScanning+0x2e4>)
 80008ae:	fb83 2301 	smull	r2, r3, r3, r1
 80008b2:	109a      	asrs	r2, r3, #2
 80008b4:	17cb      	asrs	r3, r1, #31
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1aca      	subs	r2, r1, r3
 80008c2:	4610      	mov	r0, r2
 80008c4:	f7ff fc42 	bl	800014c <display7SEG>
				index = 0;
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <LedScanning+0x2dc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
				break;
 80008ce:	e0a7      	b.n	8000a20 <LedScanning+0x2d4>
			default:
				break;
		}
	}
	else{
		switch (index) {
 80008d0:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <LedScanning+0x2dc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	f200 80a2 	bhi.w	8000a1e <LedScanning+0x2d2>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <LedScanning+0x194>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	0800092f 	.word	0x0800092f
 80008e8:	08000971 	.word	0x08000971
 80008ec:	080009c1 	.word	0x080009c1
					case 0:
						// value
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	484d      	ldr	r0, [pc, #308]	; (8000a2c <LedScanning+0x2e0>)
 80008f8:	f000 fff8 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <LedScanning+0x2e0>)
 8000904:	f000 fff2 	bl	80018ec <HAL_GPIO_WritePin>

						//mode
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090e:	4847      	ldr	r0, [pc, #284]	; (8000a2c <LedScanning+0x2e0>)
 8000910:	f000 ffec 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091a:	4844      	ldr	r0, [pc, #272]	; (8000a2c <LedScanning+0x2e0>)
 800091c:	f000 ffe6 	bl	80018ec <HAL_GPIO_WritePin>

						display7SEG(0);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fc13 	bl	800014c <display7SEG>
						index = 1;
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <LedScanning+0x2dc>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						break;
 800092c:	e078      	b.n	8000a20 <LedScanning+0x2d4>
					case 1:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	483d      	ldr	r0, [pc, #244]	; (8000a2c <LedScanning+0x2e0>)
 8000936:	f000 ffd9 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000940:	483a      	ldr	r0, [pc, #232]	; (8000a2c <LedScanning+0x2e0>)
 8000942:	f000 ffd3 	bl	80018ec <HAL_GPIO_WritePin>

						HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	4837      	ldr	r0, [pc, #220]	; (8000a2c <LedScanning+0x2e0>)
 800094e:	f000 ffcd 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000958:	4834      	ldr	r0, [pc, #208]	; (8000a2c <LedScanning+0x2e0>)
 800095a:	f000 ffc7 	bl	80018ec <HAL_GPIO_WritePin>
						display7SEG( mode);
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <LedScanning+0x2d8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fbf2 	bl	800014c <display7SEG>
						index = 2;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <LedScanning+0x2dc>)
 800096a:	2202      	movs	r2, #2
 800096c:	601a      	str	r2, [r3, #0]
						break;
 800096e:	e057      	b.n	8000a20 <LedScanning+0x2d4>
					case 2:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000976:	482d      	ldr	r0, [pc, #180]	; (8000a2c <LedScanning+0x2e0>)
 8000978:	f000 ffb8 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	482a      	ldr	r0, [pc, #168]	; (8000a2c <LedScanning+0x2e0>)
 8000984:	f000 ffb2 	bl	80018ec <HAL_GPIO_WritePin>

						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	4827      	ldr	r0, [pc, #156]	; (8000a2c <LedScanning+0x2e0>)
 8000990:	f000 ffac 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	4824      	ldr	r0, [pc, #144]	; (8000a2c <LedScanning+0x2e0>)
 800099c:	f000 ffa6 	bl	80018ec <HAL_GPIO_WritePin>
						display7SEG(get7SEGval_2() / 10);
 80009a0:	f7ff fe02 	bl	80005a8 <get7SEGval_2>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <LedScanning+0x2e4>)
 80009a8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ac:	1092      	asrs	r2, r2, #2
 80009ae:	17db      	asrs	r3, r3, #31
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fbca 	bl	800014c <display7SEG>
						index = 3;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <LedScanning+0x2dc>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	601a      	str	r2, [r3, #0]
						break;
 80009be:	e02f      	b.n	8000a20 <LedScanning+0x2d4>
					case 3:
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	4819      	ldr	r0, [pc, #100]	; (8000a2c <LedScanning+0x2e0>)
 80009c8:	f000 ff90 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <LedScanning+0x2e0>)
 80009d4:	f000 ff8a 	bl	80018ec <HAL_GPIO_WritePin>

						HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <LedScanning+0x2e0>)
 80009e0:	f000 ff84 	bl	80018ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <LedScanning+0x2e0>)
 80009ec:	f000 ff7e 	bl	80018ec <HAL_GPIO_WritePin>
						display7SEG(get7SEGval_2() % 10);
 80009f0:	f7ff fdda 	bl	80005a8 <get7SEGval_2>
 80009f4:	4601      	mov	r1, r0
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <LedScanning+0x2e4>)
 80009f8:	fb83 2301 	smull	r2, r3, r3, r1
 80009fc:	109a      	asrs	r2, r3, #2
 80009fe:	17cb      	asrs	r3, r1, #31
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1aca      	subs	r2, r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f7ff fb9d 	bl	800014c <display7SEG>
						index = 0;
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <LedScanning+0x2dc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
						break;
 8000a18:	e002      	b.n	8000a20 <LedScanning+0x2d4>
				break;
 8000a1a:	bf00      	nop
 8000a1c:	e000      	b.n	8000a20 <LedScanning+0x2d4>
					default:
						break;
 8000a1e:	bf00      	nop
				}
	}
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	2000003c 	.word	0x2000003c
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	66666667 	.word	0x66666667

08000a34 <LedTimeDurationInit>:
int mode = 1;
int red_val, green_val, yellow_val;
int red_temp, green_temp, yellow_temp;


void LedTimeDurationInit() {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	red_val = RED_INIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <LedTimeDurationInit+0x38>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	601a      	str	r2, [r3, #0]
	green_val = YELLOW_INIT;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <LedTimeDurationInit+0x3c>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
	yellow_val = GREEN_INIT;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <LedTimeDurationInit+0x40>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	601a      	str	r2, [r3, #0]

	red_temp = red_val;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <LedTimeDurationInit+0x38>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LedTimeDurationInit+0x44>)
 8000a50:	6013      	str	r3, [r2, #0]
	yellow_temp = green_val;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <LedTimeDurationInit+0x3c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <LedTimeDurationInit+0x48>)
 8000a58:	6013      	str	r3, [r2, #0]
	green_temp = yellow_val;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <LedTimeDurationInit+0x40>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <LedTimeDurationInit+0x4c>)
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2000008c 	.word	0x2000008c
 8000a70:	20000090 	.word	0x20000090
 8000a74:	20000088 	.word	0x20000088
 8000a78:	20000094 	.word	0x20000094
 8000a7c:	20000098 	.word	0x20000098
 8000a80:	2000009c 	.word	0x2000009c

08000a84 <UpdateMode>:
#include "input_reading.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void UpdateMode(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	switch (buttonState[0])
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <UpdateMode+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <UpdateMode+0x12>
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d018      	beq.n	8000ac6 <UpdateMode+0x42>
			{
				buttonState[0] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000a94:	e024      	b.n	8000ae0 <UpdateMode+0x5c>
			if(is_button_pressed(0))
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f988 	bl	8000dac <is_button_pressed>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <UpdateMode+0x56>
				buttonState[0] = BUTTON_PRESSED;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <UpdateMode+0x60>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
				mode++;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <UpdateMode+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <UpdateMode+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]
				if(mode >= 5)
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <UpdateMode+0x64>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	dd0f      	ble.n	8000ada <UpdateMode+0x56>
					mode = 1;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <UpdateMode+0x64>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000ac0:	f7ff fbd2 	bl	8000268 <resetCountValue>
			break;
 8000ac4:	e009      	b.n	8000ada <UpdateMode+0x56>
			if(!is_button_pressed(0))
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f970 	bl	8000dac <is_button_pressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d105      	bne.n	8000ade <UpdateMode+0x5a>
				buttonState[0] = BUTTON_RELEASED;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <UpdateMode+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
			break;
 8000ad8:	e001      	b.n	8000ade <UpdateMode+0x5a>
			break;
 8000ada:	bf00      	nop
 8000adc:	e000      	b.n	8000ae0 <UpdateMode+0x5c>
			break;
 8000ade:	bf00      	nop

	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000040 	.word	0x20000040
 8000ae8:	2000000c 	.word	0x2000000c

08000aec <increaseTempValue>:


static void increaseTempValue(){
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	switch(mode){
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <increaseTempValue+0x74>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d01f      	beq.n	8000b38 <increaseTempValue+0x4c>
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	dc29      	bgt.n	8000b50 <increaseTempValue+0x64>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d002      	beq.n	8000b06 <increaseTempValue+0x1a>
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d00d      	beq.n	8000b20 <increaseTempValue+0x34>
			if(yellow_temp >= 100) yellow_temp = 0;
		case 4:
			green_temp++;
			if(green_temp >= 100) green_temp = 0;
		default:
			break;
 8000b04:	e024      	b.n	8000b50 <increaseTempValue+0x64>
			red_temp++;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <increaseTempValue+0x78>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <increaseTempValue+0x78>)
 8000b0e:	6013      	str	r3, [r2, #0]
			if(red_temp >= 100) red_temp = 0;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <increaseTempValue+0x78>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b63      	cmp	r3, #99	; 0x63
 8000b16:	dd1d      	ble.n	8000b54 <increaseTempValue+0x68>
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <increaseTempValue+0x78>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
			break;
 8000b1e:	e019      	b.n	8000b54 <increaseTempValue+0x68>
			yellow_temp++;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <increaseTempValue+0x7c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <increaseTempValue+0x7c>)
 8000b28:	6013      	str	r3, [r2, #0]
			if(yellow_temp >= 100) yellow_temp = 0;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <increaseTempValue+0x7c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b63      	cmp	r3, #99	; 0x63
 8000b30:	dd02      	ble.n	8000b38 <increaseTempValue+0x4c>
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <increaseTempValue+0x7c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
			green_temp++;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <increaseTempValue+0x80>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <increaseTempValue+0x80>)
 8000b40:	6013      	str	r3, [r2, #0]
			if(green_temp >= 100) green_temp = 0;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <increaseTempValue+0x80>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b63      	cmp	r3, #99	; 0x63
 8000b48:	dd02      	ble.n	8000b50 <increaseTempValue+0x64>
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <increaseTempValue+0x80>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
			break;
 8000b50:	bf00      	nop
 8000b52:	e000      	b.n	8000b56 <increaseTempValue+0x6a>
			break;
 8000b54:	bf00      	nop
	}
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000094 	.word	0x20000094
 8000b68:	20000098 	.word	0x20000098
 8000b6c:	2000009c 	.word	0x2000009c

08000b70 <setNewDurationValue>:


static void setNewDurationValue()
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
	int diff = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
	switch(mode){
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <setNewDurationValue+0xb8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d034      	beq.n	8000bec <setNewDurationValue+0x7c>
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	dc49      	bgt.n	8000c1a <setNewDurationValue+0xaa>
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d002      	beq.n	8000b90 <setNewDurationValue+0x20>
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d017      	beq.n	8000bbe <setNewDurationValue+0x4e>
			green_val = green_temp;
			red_val += diff;
			red_temp += diff;
			break;
		default:
			break;
 8000b8e:	e044      	b.n	8000c1a <setNewDurationValue+0xaa>
			diff = red_temp  - red_val;
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <setNewDurationValue+0xbc>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <setNewDurationValue+0xc0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	607b      	str	r3, [r7, #4]
			red_val = red_temp;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <setNewDurationValue+0xbc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <setNewDurationValue+0xc0>)
 8000ba2:	6013      	str	r3, [r2, #0]
			green_val += diff;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <setNewDurationValue+0xc4>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <setNewDurationValue+0xc4>)
 8000bae:	6013      	str	r3, [r2, #0]
			green_temp += diff;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <setNewDurationValue+0xc8>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <setNewDurationValue+0xc8>)
 8000bba:	6013      	str	r3, [r2, #0]
			break;
 8000bbc:	e02e      	b.n	8000c1c <setNewDurationValue+0xac>
			diff = yellow_temp  - yellow_val;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <setNewDurationValue+0xcc>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <setNewDurationValue+0xd0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	607b      	str	r3, [r7, #4]
			yellow_val = yellow_temp;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <setNewDurationValue+0xcc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <setNewDurationValue+0xd0>)
 8000bd0:	6013      	str	r3, [r2, #0]
			red_val += diff;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <setNewDurationValue+0xc0>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <setNewDurationValue+0xc0>)
 8000bdc:	6013      	str	r3, [r2, #0]
			red_temp += diff;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <setNewDurationValue+0xbc>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <setNewDurationValue+0xbc>)
 8000be8:	6013      	str	r3, [r2, #0]
			break;
 8000bea:	e017      	b.n	8000c1c <setNewDurationValue+0xac>
			diff = green_temp  - green_val;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <setNewDurationValue+0xc8>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <setNewDurationValue+0xc4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	607b      	str	r3, [r7, #4]
			green_val = green_temp;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <setNewDurationValue+0xc8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <setNewDurationValue+0xc4>)
 8000bfe:	6013      	str	r3, [r2, #0]
			red_val += diff;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <setNewDurationValue+0xc0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <setNewDurationValue+0xc0>)
 8000c0a:	6013      	str	r3, [r2, #0]
			red_temp += diff;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <setNewDurationValue+0xbc>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <setNewDurationValue+0xbc>)
 8000c16:	6013      	str	r3, [r2, #0]
			break;
 8000c18:	e000      	b.n	8000c1c <setNewDurationValue+0xac>
			break;
 8000c1a:	bf00      	nop
	}

}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000094 	.word	0x20000094
 8000c30:	2000008c 	.word	0x2000008c
 8000c34:	20000090 	.word	0x20000090
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	20000098 	.word	0x20000098
 8000c40:	20000088 	.word	0x20000088

08000c44 <fsm_for_input_processing>:


void fsm_for_input_processing(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	switch(buttonState[1]){
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d028      	beq.n	8000ca2 <fsm_for_input_processing+0x5e>
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	dc3b      	bgt.n	8000ccc <fsm_for_input_processing+0x88>
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <fsm_for_input_processing+0x1a>
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00c      	beq.n	8000c76 <fsm_for_input_processing+0x32>
				}
			}
			//todo
			break;
		default:
			break;
 8000c5c:	e036      	b.n	8000ccc <fsm_for_input_processing+0x88>
			if(is_button_pressed(1)){
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f8a4 	bl	8000dac <is_button_pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d032      	beq.n	8000cd0 <fsm_for_input_processing+0x8c>
				buttonState[1] = BUTTON_PRESSED;
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	705a      	strb	r2, [r3, #1]
				increaseTempValue();
 8000c70:	f7ff ff3c 	bl	8000aec <increaseTempValue>
			break;
 8000c74:	e02c      	b.n	8000cd0 <fsm_for_input_processing+0x8c>
			if(!is_button_pressed(1)){
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 f898 	bl	8000dac <is_button_pressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <fsm_for_input_processing+0x46>
				buttonState[1] = BUTTON_RELEASED;
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	705a      	strb	r2, [r3, #1]
			break;
 8000c88:	e024      	b.n	8000cd4 <fsm_for_input_processing+0x90>
				if(is_button_pressed_1s(1)){
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 f8a8 	bl	8000de0 <is_button_pressed_1s>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d01e      	beq.n	8000cd4 <fsm_for_input_processing+0x90>
					buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	705a      	strb	r2, [r3, #1]
					increaseTempValue();
 8000c9c:	f7ff ff26 	bl	8000aec <increaseTempValue>
			break;
 8000ca0:	e018      	b.n	8000cd4 <fsm_for_input_processing+0x90>
			if(!is_button_pressed(1)){
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 f882 	bl	8000dac <is_button_pressed>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <fsm_for_input_processing+0x72>
				buttonState[1] = BUTTON_RELEASED;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	705a      	strb	r2, [r3, #1]
			break;
 8000cb4:	e010      	b.n	8000cd8 <fsm_for_input_processing+0x94>
				if(is_button_held(1)){
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 f8ac 	bl	8000e14 <is_button_held>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00a      	beq.n	8000cd8 <fsm_for_input_processing+0x94>
					resetCountValue();
 8000cc2:	f7ff fad1 	bl	8000268 <resetCountValue>
					increaseTempValue();
 8000cc6:	f7ff ff11 	bl	8000aec <increaseTempValue>
			break;
 8000cca:	e005      	b.n	8000cd8 <fsm_for_input_processing+0x94>
			break;
 8000ccc:	bf00      	nop
 8000cce:	e004      	b.n	8000cda <fsm_for_input_processing+0x96>
			break;
 8000cd0:	bf00      	nop
 8000cd2:	e002      	b.n	8000cda <fsm_for_input_processing+0x96>
			break;
 8000cd4:	bf00      	nop
 8000cd6:	e000      	b.n	8000cda <fsm_for_input_processing+0x96>
			break;
 8000cd8:	bf00      	nop
	}


	switch (buttonState[2]) {
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <fsm_for_input_processing+0xa4>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d00c      	beq.n	8000d00 <fsm_for_input_processing+0xbc>
			if (!is_button_pressed(2)) {
				buttonState[2] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000ce6:	e018      	b.n	8000d1a <fsm_for_input_processing+0xd6>
			if (is_button_pressed(2)) {
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f000 f85f 	bl	8000dac <is_button_pressed>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00f      	beq.n	8000d14 <fsm_for_input_processing+0xd0>
				buttonState[2] = BUTTON_PRESSED;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	709a      	strb	r2, [r3, #2]
				setNewDurationValue();
 8000cfa:	f7ff ff39 	bl	8000b70 <setNewDurationValue>
			break;
 8000cfe:	e009      	b.n	8000d14 <fsm_for_input_processing+0xd0>
			if (!is_button_pressed(2)) {
 8000d00:	2002      	movs	r0, #2
 8000d02:	f000 f853 	bl	8000dac <is_button_pressed>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <fsm_for_input_processing+0xd4>
				buttonState[2] = BUTTON_RELEASED;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <fsm_for_input_processing+0xdc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	709a      	strb	r2, [r3, #2]
			break;
 8000d12:	e001      	b.n	8000d18 <fsm_for_input_processing+0xd4>
			break;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <fsm_for_input_processing+0xd6>
			break;
 8000d18:	bf00      	nop
	}

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000040 	.word	0x20000040

08000d24 <init_buffer>:
static uint8_t flagForButtonHold[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonHold[N0_OF_BUTTONS];
void init_buffer(){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS;i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e025      	b.n	8000d7c <init_buffer+0x58>
	{
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <init_buffer+0x6c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <init_buffer+0x70>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <init_buffer+0x74>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <init_buffer+0x78>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000d58:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <init_buffer+0x7c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <init_buffer+0x80>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2100      	movs	r1, #0
 8000d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flagForButtonHold[i] = 0;
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <init_buffer+0x84>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS;i++)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	ddd6      	ble.n	8000d30 <init_buffer+0xc>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000044 	.word	0x20000044
 8000d94:	20000048 	.word	0x20000048
 8000d98:	2000004c 	.word	0x2000004c
 8000d9c:	20000050 	.word	0x20000050
 8000da0:	20000058 	.word	0x20000058
 8000da4:	20000060 	.word	0x20000060
 8000da8:	20000054 	.word	0x20000054

08000dac <is_button_pressed>:
			}
		}

	}
}
unsigned char is_button_pressed(uint8_t index){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <is_button_pressed+0x14>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e007      	b.n	8000dd0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <is_button_pressed+0x30>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf0c      	ite	eq
 8000dca:	2301      	moveq	r3, #1
 8000dcc:	2300      	movne	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000044 	.word	0x20000044

08000de0 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <is_button_pressed_1s+0x14>
 8000df0:	23ff      	movs	r3, #255	; 0xff
 8000df2:	e007      	b.n	8000e04 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <is_button_pressed_1s+0x30>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	bf0c      	ite	eq
 8000dfe:	2301      	moveq	r3, #1
 8000e00:	2300      	movne	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000050 	.word	0x20000050

08000e14 <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <is_button_held+0x14>
 8000e24:	2300      	movs	r3, #0
 8000e26:	e007      	b.n	8000e38 <is_button_held+0x24>
	return (flagForButtonHold[index] == 1);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <is_button_held+0x30>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000054 	.word	0x20000054

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fa64 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f824 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f8aa 	bl	8000fac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e58:	f000 f85c 	bl	8000f14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <main+0x50>)
 8000e5e:	f001 f9a3 	bl	80021a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_buffer();
 8000e62:	f7ff ff5f 	bl	8000d24 <init_buffer>
  LedTimeDurationInit();
 8000e66:	f7ff fde5 	bl	8000a34 <LedTimeDurationInit>
  setTimer0(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f000 f90e 	bl	800108c <setTimer0>
  setTimer1(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f000 f91f 	bl	80010b4 <setTimer1>
  while (1)
  {
	  UpdateMode();
 8000e76:	f7ff fe05 	bl	8000a84 <UpdateMode>
	  if(get_timer1_flag())
 8000e7a:	f000 f98f 	bl	800119c <get_timer1_flag>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <main+0x46>
	  {
		  LedScanning();
 8000e84:	f7ff fc62 	bl	800074c <LedScanning>
		  setTimer1(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f000 f913 	bl	80010b4 <setTimer1>
	  }
	  LedDisplayMode();
 8000e8e:	f7ff fbb9 	bl	8000604 <LedDisplayMode>
	  fsm_for_input_processing();
 8000e92:	f7ff fed7 	bl	8000c44 <fsm_for_input_processing>
	  UpdateMode();
 8000e96:	e7ee      	b.n	8000e76 <main+0x2e>
 8000e98:	200000a0 	.word	0x200000a0

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b090      	sub	sp, #64	; 0x40
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2228      	movs	r2, #40	; 0x28
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fd38 	bl	8002920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fd3c 	bl	8001950 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ede:	f000 f8cf 	bl	8001080 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 ffa8 	bl	8001e50 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f06:	f000 f8bb 	bl	8001080 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3740      	adds	r7, #64	; 0x40
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f3a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f48:	2209      	movs	r2, #9
 8000f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f5a:	f001 f8d5 	bl	8002108 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f64:	f000 f88c 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f76:	f001 fa6b 	bl	8002450 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f80:	f000 f87e 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f92:	f001 fc37 	bl	8002804 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 f870 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000a0 	.word	0x200000a0

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_GPIO_Init+0xb4>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000ff8:	f000 fc78 	bl	80018ec <HAL_GPIO_WritePin>
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	217f      	movs	r1, #127	; 0x7f
 8001000:	4819      	ldr	r0, [pc, #100]	; (8001068 <MX_GPIO_Init+0xbc>)
 8001002:	f000 fc73 	bl	80018ec <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 8001006:	230e      	movs	r3, #14
 8001008:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <MX_GPIO_Init+0xb8>)
 800101a:	f000 faed 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LIGHT_1_Pin YELLOW_LIGHT_1_Pin GREEN_LIGHT_1_Pin RED_LIGHT_2_Pin
                           YELLOW_LIGHT_2_Pin GREEN_LIGHT_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 800101e:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001022:	60bb      	str	r3, [r7, #8]
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0xb8>)
 8001038:	f000 fade 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 800103c:	237f      	movs	r3, #127	; 0x7f
 800103e:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0xbc>)
 8001054:	f000 fad0 	bl	80015f8 <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00

0800106c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
		timer_run();
 8001074:	f000 f832 	bl	80010dc <timer_run>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer0(int duration) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <setTimer0+0x20>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <setTimer0+0x24>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000068 	.word	0x20000068
 80010b0:	2000006c 	.word	0x2000006c

080010b4 <setTimer1>:
void setTimer1(int duration) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <setTimer1+0x20>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <setTimer1+0x24>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000070 	.word	0x20000070
 80010d8:	20000074 	.word	0x20000074

080010dc <timer_run>:
}
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}
void timer_run() {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <timer_run+0x8c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd0b      	ble.n	8001100 <timer_run+0x24>
		timer0_counter--;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <timer_run+0x8c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <timer_run+0x8c>)
 80010f0:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <timer_run+0x8c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <timer_run+0x24>
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <timer_run+0x90>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
	}

	if (timer1_counter > 0) {
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <timer_run+0x94>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd0b      	ble.n	8001120 <timer_run+0x44>
		timer1_counter--;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <timer_run+0x94>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3b01      	subs	r3, #1
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <timer_run+0x94>)
 8001110:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <timer_run+0x94>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <timer_run+0x44>
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <timer_run+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <timer_run+0x9c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dd0b      	ble.n	8001140 <timer_run+0x64>
		timer2_counter--;
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <timer_run+0x9c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <timer_run+0x9c>)
 8001130:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <timer_run+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <timer_run+0x64>
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <timer_run+0xa0>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <timer_run+0xa4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	dd0b      	ble.n	8001160 <timer_run+0x84>
		timer3_counter--;
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <timer_run+0xa4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <timer_run+0xa4>)
 8001150:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <timer_run+0xa4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <timer_run+0x84>
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <timer_run+0xa8>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000068 	.word	0x20000068
 800116c:	2000006c 	.word	0x2000006c
 8001170:	20000070 	.word	0x20000070
 8001174:	20000074 	.word	0x20000074
 8001178:	20000078 	.word	0x20000078
 800117c:	2000007c 	.word	0x2000007c
 8001180:	20000080 	.word	0x20000080
 8001184:	20000084 	.word	0x20000084

08001188 <get_timer0_flag>:

int get_timer0_flag() {
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
	return timer0_flag;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <get_timer0_flag+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	2000006c 	.word	0x2000006c

0800119c <get_timer1_flag>:
int get_timer1_flag() {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	return timer1_flag;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <get_timer1_flag+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000074 	.word	0x20000074

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_MspInit+0x5c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_MspInit+0x60>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_MspInit+0x60>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201c      	movs	r0, #28
 8001244:	f000 f9a1 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001248:	201c      	movs	r0, #28
 800124a:	f000 f9ba 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f87f 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f000 ffc5 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000a0 	.word	0x200000a0

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012cc:	f7ff fff8 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012e8:	4c09      	ldr	r4, [pc, #36]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f001 faef 	bl	80028d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff fda5 	bl	8000e48 <main>
  bx lr
 80012fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001308:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 800130c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001310:	200000ec 	.word	0x200000ec

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f923 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff ff3c 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f93b 	bl	80015de <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f903 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000010 	.word	0x20000010
 800139c:	20000018 	.word	0x20000018
 80013a0:	20000014 	.word	0x20000014

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x20>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_IncTick+0x20>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000018 	.word	0x20000018
 80013c4:	200000e8 	.word	0x200000e8

080013c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_GetTick+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200000e8 	.word	0x200000e8

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4906      	ldr	r1, [pc, #24]	; (8001474 <__NVIC_EnableIRQ+0x34>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff90 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff2d 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff42 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff90 	bl	80014cc <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5f 	bl	8001478 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff35 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e148      	b.n	800189e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8137 	bne.w	8001898 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4aa3      	ldr	r2, [pc, #652]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4aa1      	ldr	r2, [pc, #644]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4aa1      	ldr	r2, [pc, #644]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a9f      	ldr	r2, [pc, #636]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a9f      	ldr	r2, [pc, #636]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a9d      	ldr	r2, [pc, #628]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a9b      	ldr	r2, [pc, #620]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a9b      	ldr	r2, [pc, #620]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a99      	ldr	r2, [pc, #612]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a82      	ldr	r2, [pc, #520]	; (80018d0 <HAL_GPIO_Init+0x2d8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
          break;
 8001726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8090 	beq.w	8001898 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001790:	4a51      	ldr	r2, [pc, #324]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_GPIO_Init+0x2ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1d8>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e004      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d0:	2303      	movs	r3, #3
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d8:	2300      	movs	r3, #0
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ea:	493b      	ldr	r1, [pc, #236]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4933      	ldr	r1, [pc, #204]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800181c:	4013      	ands	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	492d      	ldr	r1, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4929      	ldr	r1, [pc, #164]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4923      	ldr	r1, [pc, #140]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4919      	ldr	r1, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4915      	ldr	r1, [pc, #84]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	3301      	adds	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aeaf 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	372c      	adds	r7, #44	; 0x2c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43d9      	mvns	r1, r3
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	400b      	ands	r3, r1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e26c      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4b8f      	ldr	r3, [pc, #572]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d112      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
 8001988:	4b8c      	ldr	r3, [pc, #560]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x12c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d168      	bne.n	8001a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e246      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76>
 80019b8:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a7f      	ldr	r2, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a77      	ldr	r2, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xbc>
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a71      	ldr	r2, [pc, #452]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fccc 	bl	80013c8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fcc8 	bl	80013c8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1fa      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe4>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fcb8 	bl	80013c8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fcb4 	bl	80013c8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1e6      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x10c>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1ba      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4939      	ldr	r1, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc6d 	bl	80013c8 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc69 	bl	80013c8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e19b      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc4c 	bl	80013c8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc48 	bl	80013c8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e17a      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fc2c 	bl	80013c8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc28 	bl	80013c8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e15a      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fa9a 	bl	80020cc <RCC_Delay>
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fc12 	bl	80013c8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	e00f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc0e 	bl	80013c8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e140      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	42420000 	.word	0x42420000
 8001bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a6 	beq.w	8001d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b97      	ldr	r3, [pc, #604]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a93      	ldr	r2, [pc, #588]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b8e      	ldr	r3, [pc, #568]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8a      	ldr	r2, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fbcf 	bl	80013c8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fbcb 	bl	80013c8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0fd      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a7a      	ldr	r2, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a72      	ldr	r2, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x356>
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a6c      	ldr	r2, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb7f 	bl	80013c8 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fb7b 	bl	80013c8 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0ab      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x37e>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb69 	bl	80013c8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fb65 	bl	80013c8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e095      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8081 	beq.w	8001e3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d061      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d146      	bne.n	8001dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb39 	bl	80013c8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb35 	bl	80013c8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e067      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d108      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	492d      	ldr	r1, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a19      	ldr	r1, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	430b      	orrs	r3, r1
 8001da6:	4927      	ldr	r1, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb09 	bl	80013c8 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb05 	bl	80013c8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e037      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x46a>
 8001dd8:	e02f      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff faf2 	bl	80013c8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff faee 	bl	80013c8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e020      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x498>
 8001e06:	e018      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e013      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060

08001e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0d0      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d910      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4965      	ldr	r1, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d040      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d115      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e073      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e06b      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4936      	ldr	r1, [pc, #216]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff fa42 	bl	80013c8 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7ff fa3e 	bl	80013c8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e053      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d210      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4922      	ldr	r1, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1cc>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1d0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9a0 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	08002948 	.word	0x08002948
 800201c:	20000010 	.word	0x20000010
 8002020:	20000014 	.word	0x20000014

08002024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d002      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x30>
 800204e:	2b08      	cmp	r3, #8
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x36>
 8002052:	e027      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002056:	613b      	str	r3, [r7, #16]
      break;
 8002058:	e027      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	0c5b      	lsrs	r3, r3, #17
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e004      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	613b      	str	r3, [r7, #16]
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 80020a6:	613b      	str	r3, [r7, #16]
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	693b      	ldr	r3, [r7, #16]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	007a1200 	.word	0x007a1200
 80020c0:	08002958 	.word	0x08002958
 80020c4:	08002968 	.word	0x08002968
 80020c8:	003d0900 	.word	0x003d0900

080020cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <RCC_Delay+0x34>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <RCC_Delay+0x38>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e8:	bf00      	nop
  }
  while (Delay --);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	60fa      	str	r2, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <RCC_Delay+0x1c>
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000010 	.word	0x20000010
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f870 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fa6e 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e035      	b.n	800222c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIM_Base_Start_IT+0x90>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0x4e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0x4e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_TIM_Base_Start_IT+0x94>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d010      	beq.n	800222a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e007      	b.n	800222a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400

08002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0202 	mvn.w	r2, #2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9b4 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9a7 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9b6 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0204 	mvn.w	r2, #4
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f98a 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f97d 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98c 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0208 	mvn.w	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f960 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f953 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f962 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f936 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f929 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f938 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0201 	mvn.w	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fe54 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b80      	cmp	r3, #128	; 0x80
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa6b 	bl	80028c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8fc 	bl	8002614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0220 	mvn.w	r2, #32
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa36 	bl	80028b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIM_ConfigClockSource+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e0b4      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0x186>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d03e      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xd4>
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	f200 8087 	bhi.w	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	f000 8086 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x172>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d87f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d01a      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xa6>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d87b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d050      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x11a>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d877      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d03c      	beq.n	800254a <HAL_TIM_ConfigClockSource+0xfa>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d873      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d058      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x13a>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d86f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d064      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d86b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d060      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d867      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d05a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	e062      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f000 f95e 	bl	80027c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
      break;
 8002522:	e04f      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f000 f947 	bl	80027c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	609a      	str	r2, [r3, #8]
      break;
 8002548:	e03c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8be 	bl	80026d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2150      	movs	r1, #80	; 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f915 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 8002568:	e02c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8dc 	bl	8002734 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f905 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 8002588:	e01c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 f89e 	bl	80026d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f8f5 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e00c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 f8ec 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      break;
 80025c0:	e000      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <TIM_Base_SetConfig+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <TIM_Base_SetConfig+0x28>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0x28>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <TIM_Base_SetConfig+0xac>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d108      	bne.n	8002662 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <TIM_Base_SetConfig+0xa8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <TIM_Base_SetConfig+0x52>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d003      	beq.n	800267a <TIM_Base_SetConfig+0x52>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <TIM_Base_SetConfig+0xac>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d108      	bne.n	800268c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <TIM_Base_SetConfig+0xa8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d103      	bne.n	80026c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	615a      	str	r2, [r3, #20]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400

080026d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f023 0201 	bic.w	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 030a 	bic.w	r3, r3, #10
 8002714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800275e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	031b      	lsls	r3, r3, #12
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002770:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	621a      	str	r2, [r3, #32]
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f043 0307 	orr.w	r3, r3, #7
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	609a      	str	r2, [r3, #8]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002818:	2302      	movs	r3, #2
 800281a:	e041      	b.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d004      	beq.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10c      	bne.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	4313      	orrs	r3, r2
 8002884:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400

080028b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <__libc_init_array>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	2600      	movs	r6, #0
 80028dc:	4d0c      	ldr	r5, [pc, #48]	; (8002910 <__libc_init_array+0x38>)
 80028de:	4c0d      	ldr	r4, [pc, #52]	; (8002914 <__libc_init_array+0x3c>)
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	42a6      	cmp	r6, r4
 80028e6:	d109      	bne.n	80028fc <__libc_init_array+0x24>
 80028e8:	f000 f822 	bl	8002930 <_init>
 80028ec:	2600      	movs	r6, #0
 80028ee:	4d0a      	ldr	r5, [pc, #40]	; (8002918 <__libc_init_array+0x40>)
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <__libc_init_array+0x44>)
 80028f2:	1b64      	subs	r4, r4, r5
 80028f4:	10a4      	asrs	r4, r4, #2
 80028f6:	42a6      	cmp	r6, r4
 80028f8:	d105      	bne.n	8002906 <__libc_init_array+0x2e>
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002900:	4798      	blx	r3
 8002902:	3601      	adds	r6, #1
 8002904:	e7ee      	b.n	80028e4 <__libc_init_array+0xc>
 8002906:	f855 3b04 	ldr.w	r3, [r5], #4
 800290a:	4798      	blx	r3
 800290c:	3601      	adds	r6, #1
 800290e:	e7f2      	b.n	80028f6 <__libc_init_array+0x1e>
 8002910:	0800296c 	.word	0x0800296c
 8002914:	0800296c 	.word	0x0800296c
 8002918:	0800296c 	.word	0x0800296c
 800291c:	08002970 	.word	0x08002970

08002920 <memset>:
 8002920:	4603      	mov	r3, r0
 8002922:	4402      	add	r2, r0
 8002924:	4293      	cmp	r3, r2
 8002926:	d100      	bne.n	800292a <memset+0xa>
 8002928:	4770      	bx	lr
 800292a:	f803 1b01 	strb.w	r1, [r3], #1
 800292e:	e7f9      	b.n	8002924 <memset+0x4>

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
